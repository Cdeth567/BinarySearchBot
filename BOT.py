import logging

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.utils.callback_data import CallbackData
from contextlib import suppress
from aiogram.utils.exceptions import MessageNotModified


logging.basicConfig(level=logging.INFO)
bot = Bot(token='6030262499:AAEx_4Vjej8GnXKVDmJzap2iPe1mjPrl0qQ')
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç.\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —É–≥–∞–¥–∞—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ.\n'
                         '–ù–∞–±–µ—Ä–∏ "/numbers_fab" –∏ –∑–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ.\n'
                         '–î–∞–ª—å—à–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π:\n">", –µ—Å–ª–∏ —Ç–≤–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –º–æ—ë;\n"<", –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ;\n"=", –∫–æ–≥–¥–∞ —è —É–≥–∞–¥–∞—é.')


user_data = {}


async def update_num_text(message: types.Message, new_value: int):
    await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}", reply_markup=get_keyboard_fab())


callback_numbers = CallbackData("fabnum", "action")


def get_keyboard_fab():
    buttons = [types.InlineKeyboardButton(text=">", callback_data=callback_numbers.new(action="decr")),
               types.InlineKeyboardButton(text="<", callback_data=callback_numbers.new(action="incr")),
               types.InlineKeyboardButton(text="=", callback_data=callback_numbers.new(action="finish"))]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def get_keyboard_fab_1():
    buttons1 = [types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=callback_numbers.new(action="continue")),
               types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=callback_numbers.new(action="end"))]
    keyboard1 = types.InlineKeyboardMarkup(row_width=1)
    keyboard1.add(*buttons1)
    return keyboard1


async def update_num_text_fab(message: types.Message, new_value: int, new_number: int):
    with suppress(MessageNotModified):
        await message.edit_text(f"–ü–û–ü–´–¢–û–ö: {new_value},\n–ú–û–Å –ß–ò–°–õ–û: {new_number}", reply_markup=get_keyboard_fab())


def incre(user_data, user_number, high, low, user_value, call: types.CallbackQuery):
    h = user_data[call.from_user.id][1]
    global c
    global u
    global use
    user_data[call.from_user.id][1] = user_number - (high - low) // 2
    if user_data[call.from_user.id][1] != h:
        user_data[call.from_user.id][2] = low
        user_data[call.from_user.id][3] = high
        user_number = user_data[call.from_user.id][1]
        c = call.message
        u = user_value + 1
        use = user_number
        return True
    else:
        return False


def decre(user_data, user_number, high, low, user_value, call: types.CallbackQuery):
    h = user_data[call.from_user.id][1]
    global c
    global u
    global use
    user_data[call.from_user.id][1] = user_number + (high - low) // 2
    if user_data[call.from_user.id][1] != h:
        user_number = user_data[call.from_user.id][1]
        user_data[call.from_user.id][2] = low
        user_data[call.from_user.id][3] = high
        c = call.message
        u = user_value + 1
        use = user_number
        return True
    else:
        return False


@dp.message_handler(commands="numbers_fab")
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = [0, 50_000_000, 0, 100_000_000]
    await message.answer("–ü–û–ü–´–¢–û–ö: 0,\n–ú–û–Å –ß–ò–°–õ–û: 50000000", reply_markup=get_keyboard_fab())


@dp.callback_query_handler(callback_numbers.filter(action=["continue"]))
async def cmd_start_1(call: types.CallbackQuery):
    await call.message.edit_text('–ù–∞–±–∏—Ä–∞–π "/numbers_fab" –∏ –∑–∞–≥–∞–¥—ã–≤–∞–π —á–∏—Å–ª–æ.')
    await call.answer()


@dp.callback_query_handler(callback_numbers.filter(action=["end"]))
async def cmd_end_1(call: types.CallbackQuery):
    await call.message.edit_text('–ü–æ–∫–∞üëã. –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –º–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:)')
    await call.answer()


async def update_num_mistake_fab(message: types.Message):
    with suppress(MessageNotModified):
        await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n1) –í—ã –∑–∞–±—ã–ª–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ\n2) –í—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫\n3) –ó–∞–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤, –∞ —è –µ–≥–æ —É–≥–∞–¥–∞—Ç—å –Ω–µ –º–æ–≥—É üòî", reply_markup=get_keyboard_fab_1())


@dp.callback_query_handler(callback_numbers.filter(action=["incr", "decr"]))
async def callbacks_num_change_fab(call: types.CallbackQuery, callback_data: dict):
    user_value = user_data[call.from_user.id][0]
    user_number = user_data[call.from_user.id][1]
    low = user_data[call.from_user.id][2]
    high = user_data[call.from_user.id][3]
    action = callback_data["action"]
    user_data[call.from_user.id][0] = user_value + 1
    if action == "incr":
        high = user_number
        if incre(user_data, user_number, high, low, user_value, call):
            await update_num_text_fab(c, u, use)
        else:
            await update_num_mistake_fab(c)
    elif action == "decr":
        low = user_number
        if decre(user_data, user_number, high, low, user_value, call):
            await update_num_text_fab(c, u, use)
        else:
            await update_num_mistake_fab(c)
    await call.answer()


def answer_to_user(number):
    p = number % 100
    ones = number % 10
    if 11 <= p <= 19:
        return '–æ–∫'
    elif ones == 1:
        return '–∫–∞'
    elif 2 <= ones <= 4:
        return '–∫–∏'
    else:
        return '–æ–∫'


@dp.callback_query_handler(callback_numbers.filter(action=["finish"]))
async def callbacks_num_finish_fab(call: types.CallbackQuery):
    number = int(user_data[call.from_user.id][0])
    await call.message.edit_text(f"–ú–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å {number} –ø–æ–ø—ã—Ç" + str(answer_to_user(number)) + f".\n–¢—ã –∑–∞–≥–∞–¥–∞–ª {user_data[call.from_user.id][1]}.", reply_markup=get_keyboard_fab_1())
    await call.answer()


if __name__ == '__main__':
    executor.start_polling(dp)
